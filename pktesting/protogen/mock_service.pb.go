// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.13.0
// source: grpeakec_proto/pktesting/mock_service.proto

package protogen

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_grpeakec_proto_pktesting_mock_service_proto protoreflect.FileDescriptor

var file_grpeakec_proto_pktesting_mock_service_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x67, 0x72, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x70, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x6d, 0x6f, 0x63, 0x6b, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x70,
	0x6b, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x32, 0x80, 0x01, 0x0a, 0x10, 0x4d, 0x6f, 0x63, 0x6b, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x44, 0x75,
	0x6d, 0x6d, 0x79, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x32, 0x90, 0x01, 0x0a, 0x11, 0x4d, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x28,
	0x01, 0x30, 0x01, 0x12, 0x41, 0x0a, 0x0b, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x28, 0x01, 0x30, 0x01, 0x32, 0x9b, 0x01, 0x0a, 0x16, 0x4d, 0x6f, 0x63, 0x6b, 0x55,
	0x6e, 0x61, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x30, 0x01, 0x12, 0x44,
	0x0a, 0x10, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x30, 0x01, 0x32, 0x9b, 0x01, 0x0a, 0x16, 0x4d, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x28, 0x01, 0x12, 0x44, 0x0a, 0x10,
	0x44, 0x75, 0x6d, 0x6d, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x6e, 0x61, 0x72, 0x79,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x28, 0x01, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x31, 0x30, 0x30, 0x2f, 0x67, 0x52, 0x50, 0x45, 0x41, 0x4b,
	0x45, 0x43, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_grpeakec_proto_pktesting_mock_service_proto_goTypes = []interface{}{
	(*any.Any)(nil),     // 0: google.protobuf.Any
	(*empty.Empty)(nil), // 1: google.protobuf.Empty
}
var file_grpeakec_proto_pktesting_mock_service_proto_depIdxs = []int32{
	0, // 0: pktesting.MockUnaryService.Unary:input_type -> google.protobuf.Any
	1, // 1: pktesting.MockUnaryService.Dummy:input_type -> google.protobuf.Empty
	0, // 2: pktesting.MockStreamService.Stream:input_type -> google.protobuf.Any
	1, // 3: pktesting.MockStreamService.DummyStream:input_type -> google.protobuf.Empty
	0, // 4: pktesting.MockUnaryStreamService.UnaryStream:input_type -> google.protobuf.Any
	1, // 5: pktesting.MockUnaryStreamService.DummyUnaryStream:input_type -> google.protobuf.Empty
	0, // 6: pktesting.MockStreamUnaryService.StreamUnary:input_type -> google.protobuf.Any
	1, // 7: pktesting.MockStreamUnaryService.DummyStreamUnary:input_type -> google.protobuf.Empty
	0, // 8: pktesting.MockUnaryService.Unary:output_type -> google.protobuf.Any
	1, // 9: pktesting.MockUnaryService.Dummy:output_type -> google.protobuf.Empty
	0, // 10: pktesting.MockStreamService.Stream:output_type -> google.protobuf.Any
	1, // 11: pktesting.MockStreamService.DummyStream:output_type -> google.protobuf.Empty
	0, // 12: pktesting.MockUnaryStreamService.UnaryStream:output_type -> google.protobuf.Any
	1, // 13: pktesting.MockUnaryStreamService.DummyUnaryStream:output_type -> google.protobuf.Empty
	0, // 14: pktesting.MockStreamUnaryService.StreamUnary:output_type -> google.protobuf.Any
	1, // 15: pktesting.MockStreamUnaryService.DummyStreamUnary:output_type -> google.protobuf.Empty
	8, // [8:16] is the sub-list for method output_type
	0, // [0:8] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_grpeakec_proto_pktesting_mock_service_proto_init() }
func file_grpeakec_proto_pktesting_mock_service_proto_init() {
	if File_grpeakec_proto_pktesting_mock_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grpeakec_proto_pktesting_mock_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_grpeakec_proto_pktesting_mock_service_proto_goTypes,
		DependencyIndexes: file_grpeakec_proto_pktesting_mock_service_proto_depIdxs,
	}.Build()
	File_grpeakec_proto_pktesting_mock_service_proto = out.File
	file_grpeakec_proto_pktesting_mock_service_proto_rawDesc = nil
	file_grpeakec_proto_pktesting_mock_service_proto_goTypes = nil
	file_grpeakec_proto_pktesting_mock_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MockUnaryServiceClient is the client API for MockUnaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MockUnaryServiceClient interface {
	// Unary takes in an Any request and returns an Any message.
	Unary(ctx context.Context, in *any.Any, opts ...grpc.CallOption) (*any.Any, error)
	// Dummy sends an empty request and gets an empty response.
	Dummy(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type mockUnaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMockUnaryServiceClient(cc grpc.ClientConnInterface) MockUnaryServiceClient {
	return &mockUnaryServiceClient{cc}
}

func (c *mockUnaryServiceClient) Unary(ctx context.Context, in *any.Any, opts ...grpc.CallOption) (*any.Any, error) {
	out := new(any.Any)
	err := c.cc.Invoke(ctx, "/pktesting.MockUnaryService/Unary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockUnaryServiceClient) Dummy(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pktesting.MockUnaryService/Dummy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MockUnaryServiceServer is the server API for MockUnaryService service.
type MockUnaryServiceServer interface {
	// Unary takes in an Any request and returns an Any message.
	Unary(context.Context, *any.Any) (*any.Any, error)
	// Dummy sends an empty request and gets an empty response.
	Dummy(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedMockUnaryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMockUnaryServiceServer struct {
}

func (*UnimplementedMockUnaryServiceServer) Unary(context.Context, *any.Any) (*any.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unary not implemented")
}
func (*UnimplementedMockUnaryServiceServer) Dummy(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dummy not implemented")
}

func RegisterMockUnaryServiceServer(s *grpc.Server, srv MockUnaryServiceServer) {
	s.RegisterService(&_MockUnaryService_serviceDesc, srv)
}

func _MockUnaryService_Unary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(any.Any)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockUnaryServiceServer).Unary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pktesting.MockUnaryService/Unary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockUnaryServiceServer).Unary(ctx, req.(*any.Any))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockUnaryService_Dummy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockUnaryServiceServer).Dummy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pktesting.MockUnaryService/Dummy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockUnaryServiceServer).Dummy(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _MockUnaryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pktesting.MockUnaryService",
	HandlerType: (*MockUnaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unary",
			Handler:    _MockUnaryService_Unary_Handler,
		},
		{
			MethodName: "Dummy",
			Handler:    _MockUnaryService_Dummy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpeakec_proto/pktesting/mock_service.proto",
}

// MockStreamServiceClient is the client API for MockStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MockStreamServiceClient interface {
	// Stream streams any messages bi-directionally.
	Stream(ctx context.Context, opts ...grpc.CallOption) (MockStreamService_StreamClient, error)
	// DummyStream streams emtpy messages bi-directionally
	DummyStream(ctx context.Context, opts ...grpc.CallOption) (MockStreamService_DummyStreamClient, error)
}

type mockStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMockStreamServiceClient(cc grpc.ClientConnInterface) MockStreamServiceClient {
	return &mockStreamServiceClient{cc}
}

func (c *mockStreamServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (MockStreamService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MockStreamService_serviceDesc.Streams[0], "/pktesting.MockStreamService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &mockStreamServiceStreamClient{stream}
	return x, nil
}

type MockStreamService_StreamClient interface {
	Send(*any.Any) error
	Recv() (*any.Any, error)
	grpc.ClientStream
}

type mockStreamServiceStreamClient struct {
	grpc.ClientStream
}

func (x *mockStreamServiceStreamClient) Send(m *any.Any) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mockStreamServiceStreamClient) Recv() (*any.Any, error) {
	m := new(any.Any)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mockStreamServiceClient) DummyStream(ctx context.Context, opts ...grpc.CallOption) (MockStreamService_DummyStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MockStreamService_serviceDesc.Streams[1], "/pktesting.MockStreamService/DummyStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &mockStreamServiceDummyStreamClient{stream}
	return x, nil
}

type MockStreamService_DummyStreamClient interface {
	Send(*empty.Empty) error
	Recv() (*empty.Empty, error)
	grpc.ClientStream
}

type mockStreamServiceDummyStreamClient struct {
	grpc.ClientStream
}

func (x *mockStreamServiceDummyStreamClient) Send(m *empty.Empty) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mockStreamServiceDummyStreamClient) Recv() (*empty.Empty, error) {
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MockStreamServiceServer is the server API for MockStreamService service.
type MockStreamServiceServer interface {
	// Stream streams any messages bi-directionally.
	Stream(MockStreamService_StreamServer) error
	// DummyStream streams emtpy messages bi-directionally
	DummyStream(MockStreamService_DummyStreamServer) error
}

// UnimplementedMockStreamServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMockStreamServiceServer struct {
}

func (*UnimplementedMockStreamServiceServer) Stream(MockStreamService_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (*UnimplementedMockStreamServiceServer) DummyStream(MockStreamService_DummyStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DummyStream not implemented")
}

func RegisterMockStreamServiceServer(s *grpc.Server, srv MockStreamServiceServer) {
	s.RegisterService(&_MockStreamService_serviceDesc, srv)
}

func _MockStreamService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MockStreamServiceServer).Stream(&mockStreamServiceStreamServer{stream})
}

type MockStreamService_StreamServer interface {
	Send(*any.Any) error
	Recv() (*any.Any, error)
	grpc.ServerStream
}

type mockStreamServiceStreamServer struct {
	grpc.ServerStream
}

func (x *mockStreamServiceStreamServer) Send(m *any.Any) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mockStreamServiceStreamServer) Recv() (*any.Any, error) {
	m := new(any.Any)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MockStreamService_DummyStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MockStreamServiceServer).DummyStream(&mockStreamServiceDummyStreamServer{stream})
}

type MockStreamService_DummyStreamServer interface {
	Send(*empty.Empty) error
	Recv() (*empty.Empty, error)
	grpc.ServerStream
}

type mockStreamServiceDummyStreamServer struct {
	grpc.ServerStream
}

func (x *mockStreamServiceDummyStreamServer) Send(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mockStreamServiceDummyStreamServer) Recv() (*empty.Empty, error) {
	m := new(empty.Empty)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MockStreamService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pktesting.MockStreamService",
	HandlerType: (*MockStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _MockStreamService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DummyStream",
			Handler:       _MockStreamService_DummyStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpeakec_proto/pktesting/mock_service.proto",
}

// MockUnaryStreamServiceClient is the client API for MockUnaryStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MockUnaryStreamServiceClient interface {
	// UnaryStream send a unary Any request and receives an Any response stream.
	UnaryStream(ctx context.Context, in *any.Any, opts ...grpc.CallOption) (MockUnaryStreamService_UnaryStreamClient, error)
	// DummyStream streams emtpy messages bi-directionally
	DummyUnaryStream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (MockUnaryStreamService_DummyUnaryStreamClient, error)
}

type mockUnaryStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMockUnaryStreamServiceClient(cc grpc.ClientConnInterface) MockUnaryStreamServiceClient {
	return &mockUnaryStreamServiceClient{cc}
}

func (c *mockUnaryStreamServiceClient) UnaryStream(ctx context.Context, in *any.Any, opts ...grpc.CallOption) (MockUnaryStreamService_UnaryStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MockUnaryStreamService_serviceDesc.Streams[0], "/pktesting.MockUnaryStreamService/UnaryStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &mockUnaryStreamServiceUnaryStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MockUnaryStreamService_UnaryStreamClient interface {
	Recv() (*any.Any, error)
	grpc.ClientStream
}

type mockUnaryStreamServiceUnaryStreamClient struct {
	grpc.ClientStream
}

func (x *mockUnaryStreamServiceUnaryStreamClient) Recv() (*any.Any, error) {
	m := new(any.Any)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mockUnaryStreamServiceClient) DummyUnaryStream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (MockUnaryStreamService_DummyUnaryStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MockUnaryStreamService_serviceDesc.Streams[1], "/pktesting.MockUnaryStreamService/DummyUnaryStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &mockUnaryStreamServiceDummyUnaryStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MockUnaryStreamService_DummyUnaryStreamClient interface {
	Recv() (*empty.Empty, error)
	grpc.ClientStream
}

type mockUnaryStreamServiceDummyUnaryStreamClient struct {
	grpc.ClientStream
}

func (x *mockUnaryStreamServiceDummyUnaryStreamClient) Recv() (*empty.Empty, error) {
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MockUnaryStreamServiceServer is the server API for MockUnaryStreamService service.
type MockUnaryStreamServiceServer interface {
	// UnaryStream send a unary Any request and receives an Any response stream.
	UnaryStream(*any.Any, MockUnaryStreamService_UnaryStreamServer) error
	// DummyStream streams emtpy messages bi-directionally
	DummyUnaryStream(*empty.Empty, MockUnaryStreamService_DummyUnaryStreamServer) error
}

// UnimplementedMockUnaryStreamServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMockUnaryStreamServiceServer struct {
}

func (*UnimplementedMockUnaryStreamServiceServer) UnaryStream(*any.Any, MockUnaryStreamService_UnaryStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method UnaryStream not implemented")
}
func (*UnimplementedMockUnaryStreamServiceServer) DummyUnaryStream(*empty.Empty, MockUnaryStreamService_DummyUnaryStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DummyUnaryStream not implemented")
}

func RegisterMockUnaryStreamServiceServer(s *grpc.Server, srv MockUnaryStreamServiceServer) {
	s.RegisterService(&_MockUnaryStreamService_serviceDesc, srv)
}

func _MockUnaryStreamService_UnaryStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(any.Any)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MockUnaryStreamServiceServer).UnaryStream(m, &mockUnaryStreamServiceUnaryStreamServer{stream})
}

type MockUnaryStreamService_UnaryStreamServer interface {
	Send(*any.Any) error
	grpc.ServerStream
}

type mockUnaryStreamServiceUnaryStreamServer struct {
	grpc.ServerStream
}

func (x *mockUnaryStreamServiceUnaryStreamServer) Send(m *any.Any) error {
	return x.ServerStream.SendMsg(m)
}

func _MockUnaryStreamService_DummyUnaryStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MockUnaryStreamServiceServer).DummyUnaryStream(m, &mockUnaryStreamServiceDummyUnaryStreamServer{stream})
}

type MockUnaryStreamService_DummyUnaryStreamServer interface {
	Send(*empty.Empty) error
	grpc.ServerStream
}

type mockUnaryStreamServiceDummyUnaryStreamServer struct {
	grpc.ServerStream
}

func (x *mockUnaryStreamServiceDummyUnaryStreamServer) Send(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

var _MockUnaryStreamService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pktesting.MockUnaryStreamService",
	HandlerType: (*MockUnaryStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UnaryStream",
			Handler:       _MockUnaryStreamService_UnaryStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DummyUnaryStream",
			Handler:       _MockUnaryStreamService_DummyUnaryStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpeakec_proto/pktesting/mock_service.proto",
}

// MockStreamUnaryServiceClient is the client API for MockStreamUnaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MockStreamUnaryServiceClient interface {
	// StreamUnary streams Any messages as a request and receives a single Any response.
	StreamUnary(ctx context.Context, opts ...grpc.CallOption) (MockStreamUnaryService_StreamUnaryClient, error)
	// DummyStreamUnary streams emtpy request messages and receives a single Empty
	// response.
	DummyStreamUnary(ctx context.Context, opts ...grpc.CallOption) (MockStreamUnaryService_DummyStreamUnaryClient, error)
}

type mockStreamUnaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMockStreamUnaryServiceClient(cc grpc.ClientConnInterface) MockStreamUnaryServiceClient {
	return &mockStreamUnaryServiceClient{cc}
}

func (c *mockStreamUnaryServiceClient) StreamUnary(ctx context.Context, opts ...grpc.CallOption) (MockStreamUnaryService_StreamUnaryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MockStreamUnaryService_serviceDesc.Streams[0], "/pktesting.MockStreamUnaryService/StreamUnary", opts...)
	if err != nil {
		return nil, err
	}
	x := &mockStreamUnaryServiceStreamUnaryClient{stream}
	return x, nil
}

type MockStreamUnaryService_StreamUnaryClient interface {
	Send(*any.Any) error
	CloseAndRecv() (*any.Any, error)
	grpc.ClientStream
}

type mockStreamUnaryServiceStreamUnaryClient struct {
	grpc.ClientStream
}

func (x *mockStreamUnaryServiceStreamUnaryClient) Send(m *any.Any) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mockStreamUnaryServiceStreamUnaryClient) CloseAndRecv() (*any.Any, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(any.Any)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mockStreamUnaryServiceClient) DummyStreamUnary(ctx context.Context, opts ...grpc.CallOption) (MockStreamUnaryService_DummyStreamUnaryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MockStreamUnaryService_serviceDesc.Streams[1], "/pktesting.MockStreamUnaryService/DummyStreamUnary", opts...)
	if err != nil {
		return nil, err
	}
	x := &mockStreamUnaryServiceDummyStreamUnaryClient{stream}
	return x, nil
}

type MockStreamUnaryService_DummyStreamUnaryClient interface {
	Send(*empty.Empty) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type mockStreamUnaryServiceDummyStreamUnaryClient struct {
	grpc.ClientStream
}

func (x *mockStreamUnaryServiceDummyStreamUnaryClient) Send(m *empty.Empty) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mockStreamUnaryServiceDummyStreamUnaryClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MockStreamUnaryServiceServer is the server API for MockStreamUnaryService service.
type MockStreamUnaryServiceServer interface {
	// StreamUnary streams Any messages as a request and receives a single Any response.
	StreamUnary(MockStreamUnaryService_StreamUnaryServer) error
	// DummyStreamUnary streams emtpy request messages and receives a single Empty
	// response.
	DummyStreamUnary(MockStreamUnaryService_DummyStreamUnaryServer) error
}

// UnimplementedMockStreamUnaryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMockStreamUnaryServiceServer struct {
}

func (*UnimplementedMockStreamUnaryServiceServer) StreamUnary(MockStreamUnaryService_StreamUnaryServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamUnary not implemented")
}
func (*UnimplementedMockStreamUnaryServiceServer) DummyStreamUnary(MockStreamUnaryService_DummyStreamUnaryServer) error {
	return status.Errorf(codes.Unimplemented, "method DummyStreamUnary not implemented")
}

func RegisterMockStreamUnaryServiceServer(s *grpc.Server, srv MockStreamUnaryServiceServer) {
	s.RegisterService(&_MockStreamUnaryService_serviceDesc, srv)
}

func _MockStreamUnaryService_StreamUnary_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MockStreamUnaryServiceServer).StreamUnary(&mockStreamUnaryServiceStreamUnaryServer{stream})
}

type MockStreamUnaryService_StreamUnaryServer interface {
	SendAndClose(*any.Any) error
	Recv() (*any.Any, error)
	grpc.ServerStream
}

type mockStreamUnaryServiceStreamUnaryServer struct {
	grpc.ServerStream
}

func (x *mockStreamUnaryServiceStreamUnaryServer) SendAndClose(m *any.Any) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mockStreamUnaryServiceStreamUnaryServer) Recv() (*any.Any, error) {
	m := new(any.Any)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MockStreamUnaryService_DummyStreamUnary_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MockStreamUnaryServiceServer).DummyStreamUnary(&mockStreamUnaryServiceDummyStreamUnaryServer{stream})
}

type MockStreamUnaryService_DummyStreamUnaryServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*empty.Empty, error)
	grpc.ServerStream
}

type mockStreamUnaryServiceDummyStreamUnaryServer struct {
	grpc.ServerStream
}

func (x *mockStreamUnaryServiceDummyStreamUnaryServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mockStreamUnaryServiceDummyStreamUnaryServer) Recv() (*empty.Empty, error) {
	m := new(empty.Empty)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MockStreamUnaryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pktesting.MockStreamUnaryService",
	HandlerType: (*MockStreamUnaryServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamUnary",
			Handler:       _MockStreamUnaryService_StreamUnary_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DummyStreamUnary",
			Handler:       _MockStreamUnaryService_DummyStreamUnary_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "grpeakec_proto/pktesting/mock_service.proto",
}
